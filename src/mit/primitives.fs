CR .( Required primitives )

\ Stack primitives

1 0 PRIMITIVE DROP
MLIT_1 MPOP
END-PRIMITIVE

1 1 PRIMITIVE PICK
MDUP
END-PRIMITIVE

2 2 PRIMITIVE SWAP
MLIT_0 MSWAP
END-PRIMITIVE

0 1 PRIMITIVE CELL
MLIT NOPALIGN 4 ,
END-PRIMITIVE

0 1 PRIMITIVE -CELL
MLIT NOPALIGN -4 ,
END-PRIMITIVE


\ Memory primitives

1 1 PRIMITIVE @
MLIT_2 MLOAD \ FIXME: constant!
END-PRIMITIVE

2 0 PRIMITIVE !
MLIT_2 MSTORE
END-PRIMITIVE

1 1 PRIMITIVE C@
MLIT_0 MLOAD
END-PRIMITIVE

2 0 PRIMITIVE C!
MLIT_0 MSTORE
END-PRIMITIVE


\ Arithmetic and logical primitives

2 1 PRIMITIVE +
MADD
END-PRIMITIVE

1 1 PRIMITIVE NEGATE
MNEGATE
END-PRIMITIVE

2 1 PRIMITIVE *
MMUL
END-PRIMITIVE

\ FIXME: check for division by zero
2 2 PRIMITIVE U/MOD
MUDIVMOD
MLIT_0 MSWAP
END-PRIMITIVE

2 2 PRIMITIVE S/REM
MDIVMOD
MLIT_0 MSWAP
END-PRIMITIVE

2 1 PRIMITIVE =
MXOR MLIT_1 MULT
MNEGATE
END-PRIMITIVE

2 1 PRIMITIVE <
MLT
MNEGATE
END-PRIMITIVE

2 1 PRIMITIVE U<
MULT
MNEGATE
END-PRIMITIVE

2 1 PRIMITIVE AND
MAND
END-PRIMITIVE

2 1 PRIMITIVE OR
MOR
END-PRIMITIVE

2 1 PRIMITIVE XOR
MXOR
END-PRIMITIVE

1 1 PRIMITIVE INVERT
MNOT
END-PRIMITIVE

2 1 PRIMITIVE LSHIFT
MLSHIFT
END-PRIMITIVE

2 1 PRIMITIVE RSHIFT
MRSHIFT
END-PRIMITIVE


\ System primitives

$2 LIBC-PRIMITIVE HALT
$C LIBMIT-PRIMITIVE NATIVE-POINTER-CELLS


\ Control primitives

INCLUDE" bracket-does.fs"


\ Stack management

\ FIXME: Make this a small constant!
VARIABLE PRIMITIVE-RP

\ FIXME: Make this a small constant!
VARIABLE RP
\ FIXME: >R and R> must be defined as CODE words, because they are needed by
\ LINK, and UNLINK,
1 0 PRIMITIVE >R
MLIT MLIT_0 MDUP MLIT_2 \ FIXME: constant!
' RP >BODY <'FORTH ,
MLOAD MLIT MADD MLIT_0
-4 , \ FIXME: target -CELL, not -4
MDUP MLIT_1 MSWAP MLIT_2 \ FIXME: constant!
MSTORE MLIT_2 MSTORE \ FIXME: constant!
END-PRIMITIVE
0 INLINE \ Prevent inlining: it's too long to go at the start of each word!

0 1 PRIMITIVE R>
MLIT MLIT_0 MDUP MLIT_2 \ FIXME: constant!
' RP >BODY <'FORTH ,
MLOAD MLIT_0 MDUP MLIT
4 , \ FIXME: target CELL, not 4
MADD MLIT_0 MSWAP MLIT_1
MSWAP MLIT_2 MSTORE MLIT_2 \ FIXME: constant! x 2
MLOAD
END-PRIMITIVE
0 INLINE \ Prevent inlining: it's too long to go at the start of each word!

0 1 PRIMITIVE R@
MLIT MLIT_2 MLOAD MLIT_2 \ FIXME: constant! Ã— 2
' RP >BODY <'FORTH ,
MLOAD
END-PRIMITIVE

0 1 PRIMITIVE RP@
MLIT MLIT_2 MLOAD NOPALIGN \ FIXME: constant!
' RP >BODY <'FORTH ,
END-PRIMITIVE

\ FIXME: -9 THROW if RP is out of range
\ Must be a primitive as it would mess up its own return
1 0 PRIMITIVE RP!
MLIT MLIT_2 MSTORE NOPALIGN \ FIXME: constant!
' RP >BODY <'FORTH ,
END-PRIMITIVE


$0 LIBMIT-PRIMITIVE MIT_CURRENT_STATE
$1 LIBMIT-PRIMITIVE NATIVE_ADDRESS_OF_RANGE
$13 LIBMIT-PRIMITIVE GET_STACK_DEPTH
$14 LIBMIT-PRIMITIVE SET_STACK_DEPTH

\ Stack management primitives

0 0 PRIMITIVE SP@
MPUSH_STACK_DEPTH
MLIT_2 MLSHIFT \ FIXME constant!
END-PRIMITIVE

\ FIXME: -9 THROW if out of range
1 0 PRIMITIVE SP!
MLIT_2 MRSHIFT MNOT \ FIXME constant!
MPUSH_STACK_DEPTH MADD MPOP
END-PRIMITIVE
