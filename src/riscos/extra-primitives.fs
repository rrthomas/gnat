CR .( Extra primitives )

\ Stack primitives

CODE DUP
TOP SP PUSH,
END-SUB

CODE SWAP
R0 SP 0@ LDR,
TOP SP 0@ STR,
TOP R0 MOV,
END-SUB

CODE OVER
TOP SP PUSH,
TOP SP 4 #+@ LDR,
END-SUB

CODE ROT
R0 TOP MOV,
SP @! { R1 TOP } FD LDM,
SP @! { R0 R1 } FD STM,
END-SUB

CODE -ROT
SP @! { R0 R1 } FD LDM,
SP @! { R1 TOP } FD STM,
TOP R0 MOV,
END-SUB

CODE TUCK
R0 SP 0@ LDR,
TOP SP 0@ STR,
R0 SP 4 #-@! STR,
END-SUB

CODE NIP
SP SP 4 # ADD,
END-SUB

CODE ?DUP
TOP 0 # CMP,
TOP SP NE PUSH,
END-SUB


\ Arithmetic and logical primitives

2 1 PRIMITIVE >
R0 TOP CMP,
TOP 0 # GT MVN,
TOP 0 # LE MOV,
END-PRIMITIVE

2 1 PRIMITIVE <>
TOP TOP R0 SET EOR,
TOP 0 # NE MVN,
END-PRIMITIVE

1 1 PRIMITIVE 0<
TOP TOP 31 #ASR MOV,
END-PRIMITIVE

1 1 PRIMITIVE 0>
TOP TOP 0 # RSB,
TOP TOP 31 #ASR MOV,
END-PRIMITIVE

1 1 PRIMITIVE 0=
TOP TOP 1 # SET SUB,
TOP TOP TOP SBC,
END-PRIMITIVE

1 1 PRIMITIVE 0<>
TOP 0 # CMP,
TOP 0 # NE MVN,
END-PRIMITIVE

2 1 PRIMITIVE U>
TOP TOP R0 SET SUB,
TOP TOP TOP SBC,
END-PRIMITIVE

0 1 PRIMITIVE 0
TOP 0 # MOV,
END-PRIMITIVE

0 1 PRIMITIVE 1
TOP 1 # MOV,
END-PRIMITIVE

0 1 PRIMITIVE -1
TOP 0 # MVN,
END-PRIMITIVE

0 1 PRIMITIVE TRUE
TOP FALSE # MVN,
END-PRIMITIVE

0 1 PRIMITIVE FALSE
TOP FALSE # MOV,
END-PRIMITIVE

1 1 PRIMITIVE 1+
TOP TOP 1 # ADD,
END-PRIMITIVE

1 1 PRIMITIVE 1-
TOP TOP 1 # SUB,
END-PRIMITIVE

1 1 PRIMITIVE CELL+
TOP TOP CELL # ADD,
END-PRIMITIVE

1 1 PRIMITIVE CELL-
TOP TOP CELL # SUB,
END-PRIMITIVE

1 1 PRIMITIVE 2*
TOP TOP 1 #ASL MOV,
END-PRIMITIVE

1 1 PRIMITIVE 2/
TOP TOP 1 #ASR MOV,
END-PRIMITIVE

1 1 PRIMITIVE CELLS
TOP TOP 2 #ASL MOV,
END-PRIMITIVE

1 1 PRIMITIVE CELL/
TOP TOP 2 #ASR MOV,
END-PRIMITIVE

1 1 PRIMITIVE 1LSHIFT
TOP TOP 1 #LSL MOV,
END-PRIMITIVE

1 1 PRIMITIVE 1RSHIFT
TOP TOP 1 #LSR MOV,
END-PRIMITIVE

2 1 PRIMITIVE >-<
TOP TOP R0 SUB,
END-PRIMITIVE

2 1 PRIMITIVE MAX
R0 TOP CMP,
TOP R0 GT MOV,
END-PRIMITIVE

2 1 PRIMITIVE MIN
R0 TOP CMP,
TOP R0 LT MOV,
END-PRIMITIVE

1 1 PRIMITIVE ABS
TOP 0 # CMP,
TOP TOP 0 # MI RSB,
END-PRIMITIVE


\ Memory primitives

2 0 PRIMITIVE +!
R1 TOP 0@ LDR,
R0 R0 R1 ADD,
R0 TOP 0@ STR,
END-PRIMITIVE


\ System primitives

CODE BYE
R0 0 # MOV,
R1 0 # MOV,
SWI," XOS_Exit"
END-CODE


\ Control primitives

0 1 PRIMITIVE J
TOP RP 8 #+@ LDR,
END-PRIMITIVE
COMPILING

CODE EXIT
UNLINK,
END-CODE
COMPILING

0 0 PRIMITIVE UNLOOP
RP RP 8 # ADD,
END-PRIMITIVE
COMPILING

VARIABLE 'THROW

CODE THROW
PC ' 'THROW >BODY PCR LDR,
END-CODE

1 0 PRIMITIVE 'THROW!
TOP ' 'THROW >BODY PCR STR,
END-PRIMITIVE


\ Extras

\ Arithmetic and logic

2 1 PRIMITIVE ARSHIFT
TOP R0 TOP ASR MOV,
END-PRIMITIVE
