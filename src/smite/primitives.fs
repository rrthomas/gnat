CR .( Assembler words )

ALSO ASSEMBLER

CODE DUP   ] 0 [ BPUSH BRET END-CODE  2 INLINE
CODE DROP   ] 1 [ BPOP BRET END-CODE  2 INLINE
CODE SWAP   ] 1 [ BSWAP BRET END-CODE  2 INLINE
CODE OVER   ] 1 [ BPUSH BRET END-CODE  2 INLINE
CODE PICK   BPUSH BRET END-CODE  1 INLINE
CODE >R   BPOP2R BRET END-CODE  1 INLINE
CODE R>   BRPOP BRET END-CODE  1 INLINE
CODE <   BLT BNEGATE BRET END-CODE  2 INLINE
CODE =   BEQ BNEGATE BRET END-CODE  2 INLINE
CODE U<   BULT BNEGATE BRET END-CODE  2 INLINE
CODE R@   ] 1 [ BRPUSH BRET END-CODE
: CELL   4 ;
: -CELL   -4 ;
CODE +   BADD BRET END-CODE  1 INLINE
CODE *   BMUL BRET END-CODE  1 INLINE
CODE -   BNEGATE BADD BRET END-CODE  2 INLINE
2 PRIMITIVES THROW NEGATE
CODE U/MOD   BUDIVMOD ] 1 [ BSWAP BRET END-CODE
CODE S/REM   BDIVMOD ] 1 [  BSWAP BRET END-CODE
6 PRIMITIVES AND OR XOR INVERT LSHIFT RSHIFT
CODE @   BLOAD BRET END-CODE  1 INLINE
CODE !   BSTORE BRET END-CODE  1 INLINE
CODE C@   BLOADB BRET END-CODE  1 INLINE
CODE C!   BSTOREB BRET END-CODE  1 INLINE
CODE EXIT   BRET END-CODE  1 INLINE
CODE J   ] 3 [ BRPUSH BRET END-CODE
INCLUDE" bracket-create.fs"
INCLUDE" bracket-does.fs"
CODE SP@   BPUSH_SP BRET END-CODE  1 INLINE
CODE SP!   BSTORE_SP BRET END-CODE  1 INLINE
CODE RP@   BPUSH_RP BRET END-CODE  1 INLINE
CODE RP!   BSTORE_RP BRET END-CODE  1 INLINE
CODE 'THROW!   BSTORE_HANDLER BRET END-CODE  1 INLINE
CODE MEMORY@   BPUSH_MEMORY BRET END-CODE  1 INLINE
CODE S0   BPUSH_S0 BRET END-CODE  1 INLINE
CODE R0   BPUSH_R0 BRET END-CODE  1 INLINE
CODE STACK-CELLS   BPUSH_SSIZE BRET END-CODE  1 INLINE
CODE RETURN-STACK-CELLS   BPUSH_RSIZE BRET END-CODE  1 INLINE
2 PRIMITIVES HALT LINK

PREVIOUS
