This file, written by Reuben Thomas, is in the public domain.

Have SIGINT handler in interpreter loop. Process Ctrl+D as normal.

Add startup script support using environment variable PFORTH_INIT (needs
getenv), and use this to replace extended image building (works for RISC OS
too!).

Add backtrace to error output.

Support objects.

Support locals.

Add TIMES combinator and use in assembler.

Make Gnat case-insensitive for word lookup, or downcase it all.

Add assembler to base image.

Obviate the need for the compilation method field (>COMPILE) by using
cmForth-like compilation word list. But this does prevent it being possible
to have separate execution and interpretation semantics at compile time. Or,
have a stateless always-compiling compiler, where running out of code to
compile before ; causes the code compiled so far to be executed and thrown
away.


The future of Gnat:

All the stuff below still applies if I feel like doing anything to the Forth
system itself. Indeed, it may well provide a good starting point for many of
the Tau structures, though I'll probably want to develop the language first.


Add INLINE name and ( xt ) INLINE, for compiling in-line code.

Have DLITERAL, as the current way of doing double literals is rather
unportable.

Have proper escape and error handlers that throw an exception. Use exceptions
in the file words instead of return codes (have a switch to go between
returning codes and throwing exceptions).

Metacompilation: all defining words should be classes; then during
metacompilation there's two versions of each class, one implemented by the
cross-compiler, and one in the compiled implementation. Using something like
delegation, metacompiled classes can delegate to a class in the metacompiler,
or (much of the time) delegate wholesale to the standard class (when the
structure of the metacompiled class is the same).

Continue to reengineer HighLevel code:

0. OOPify; this takes in all the steps below. Rewrite the metacompiler to use
objects whose methods are different depending on whether we're in the
compiler or metacompiler (this is really contexts).

1. Factor long definitions. Especially, re-engineer code that deals with
input source in a much more OOP manner into one package for each type of
input stream (string, terminal, files): have an input source object whose
methods (SOURCE-ID, SOURCE, SAVE-INPUT, RESTORE-INPUT &c.) can be called.

2. Add memory allocation and use for transient buffers. Using for
dictionaries has two obvious problems: first, need to auto-extend areas being
compiled into (or shrink to fit at end); second, generating a meta-compiled
image will be harder.

3. Make general-purpose forward-reference mechanism (using CATCH/THROW around
ordinary INTERPRET, and existing forward resolution mechanism). Needs memory
allocation to be able to start a new definition when half-way through the
current one.

4. Need a mechanism for handling system-specific replacement code; then can
replace bits all the way from a simple VM implementation (Tau?) down to a
highly OS-integrated one which replaces ACCEPT &c. Again, use objects.

5. Don't interpret, always compile, by default as a :NONAME. Use separate
control stack: if when the input source becomes empty the control stack is
empty, execute. (Defining words put a placeholder on the control stack; [
and ] must temporarily stash the top value.) This gets rid of STATE and
dual-action (compile/interpret) words.
